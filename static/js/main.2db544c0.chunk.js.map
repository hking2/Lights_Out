{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","handleClick","bind","e","this","switchAdjs","css_class","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","Math","random","percentLit","y","nRow","row","x","nCol","push","randBool","coor","split","map","Number","switchCell","every","cell","setState","gameBoard","key","switchAdjCells","creatGameBoard","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UAsBeA,G,wDAlBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,wDAKPC,GACVC,KAAKJ,MAAMK,e,+BAIX,IAAIC,EAAaF,KAAKJ,MAAMO,MAAQ,gBAAkB,OAEtD,OACI,wBAAIC,UAAWF,EAAWG,QAASL,KAAKH,kB,GAd7BS,cCCbC,G,wDAOJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXC,QAAQ,EACRC,MAAO,EAAKC,eAJG,E,uDASjB,OAAQC,KAAKC,UAAYb,KAAKJ,MAAMkB,a,oCAMpC,IAFA,IAAIJ,EAAQ,GACRK,GAAK,IACAA,EAAIf,KAAKJ,MAAMoB,MAAM,CAG5B,IAFA,IAAIC,EAAM,GACNC,GAAK,IACAA,EAAIlB,KAAKJ,MAAMuB,MACtBF,EAAIG,KAAKpB,KAAKqB,YAEhBX,EAAMU,KAAKH,GAEb,OAAOP,I,qCAGMY,GAAO,IAAD,EACEtB,KAAKJ,MAApBuB,EADa,EACbA,KAAMH,EADO,EACPA,KACRN,EAAQV,KAAKQ,MAAME,MAFJ,EAGNY,EAAKC,MAAM,KAAKC,IAAIC,QAHd,mBAGdV,EAHc,KAGXG,EAHW,KAInB,SAASQ,EAAWX,EAAGG,GACjBA,GAAK,GACJA,EAAIC,GACJJ,GAAK,GACLA,EAAIC,IACPN,EAAMK,GAAGG,IAAMR,EAAMK,GAAGG,IAG5BQ,EAAWX,EAAGG,GACdQ,EAAWX,EAAGG,EAAI,GAClBQ,EAAWX,EAAGG,EAAI,GAClBQ,EAAWX,EAAI,EAAGG,GAClBQ,EAAWX,EAAI,EAAGG,GAElB,IAAMT,EAASC,EAAMiB,OAAM,SAAAV,GAAG,OAAIA,EAAIU,OAAM,SAAAC,GAAI,OAAKA,QACrD5B,KAAK6B,SAAS,CAAEnB,QAAOD,a,uCAKvB,IAFgB,IAAD,OACXqB,EAAY,GACPf,EAAI,EAAGA,EAAIf,KAAKJ,MAAMoB,KAAMD,IAAK,CAExC,IADA,IAAIE,EAAM,GAD8B,WAE/BC,GACP,IAAII,EAAI,UAAMP,EAAN,YAAWG,GACnBD,EAAIG,KACF,kBAAC,EAAD,CACEW,IAAKT,EACLnB,MAAO,EAAKK,MAAME,MAAMK,GAAGG,GAC3BjB,WAAY,kBAAM,EAAK+B,eAAeV,QANnCJ,EAAI,EAAGA,EAAIlB,KAAKJ,MAAMuB,KAAMD,IAAM,EAAlCA,GAUTY,EAAUV,KAAK,wBAAIW,IAAKhB,GAAIE,IAE9B,OACE,2BAAOb,UAAU,SACf,+BAAQ0B,M,+BAKZ,OACE,6BACG9B,KAAKQ,MAAMC,OACV,yBAAKL,UAAU,UACb,0BAAMA,UAAU,eAAhB,OACA,0BAAMA,UAAU,aAAhB,SAGF,6BACE,yBAAKA,UAAU,eACb,yBAAKA,UAAU,aAAf,UACA,yBAAKA,UAAU,eAAf,QAEDJ,KAAKiC,uB,GA3FE3B,cAAdC,EACG2B,aAAe,CACpBlB,KAAM,EACNG,KAAM,EACNL,WAAY,KA+FDP,QCtFA4B,G,6KARX,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,W,GAJUE,cCKE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2db544c0.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './Cell.css'\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    this.props.switchAdjs();\n  }\n\n  render() {\n    let css_class = (this.props.isLit ? \"Cell Cell-lit\" : \"Cell\");\n\n    return (\n        <td className={css_class} onClick={this.handleClick} />\n    )\n  }\n}\n\nexport default Cell;","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\nclass Board extends Component {\n  static defaultProps = {\n    nRow: 5,\n    nCol: 5,\n    percentLit: 0.75\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  randBool() {\n    return (Math.random() >= this.props.percentLit ? true : false);\n  }\n\n  createBoard() {\n    let board = [];\n    let y = -1;\n    while (++y < this.props.nRow) {\n      let row = [];\n      let x = -1;\n      while (++x < this.props.nCol) {\n        row.push(this.randBool());\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  switchAdjCells(coor) {\n    let { nCol, nRow } = this.props;\n    let board = this.state.board;\n    let [y, x] = coor.split(\"-\").map(Number);\n    function switchCell(y, x) {\n      if (x >= 0 \n        && x < nCol \n        && y >= 0 \n        && y < nRow) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    switchCell(y, x);\n    switchCell(y, x - 1);\n    switchCell(y, x + 1);\n    switchCell(y - 1, x);\n    switchCell(y + 1, x);\n\n    const hasWon = board.every(row => row.every(cell => !cell));\n    this.setState({ board, hasWon });\n  }\n\n  creatGameBoard() {\n    let gameBoard = [];\n    for (let y = 0; y < this.props.nRow; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.nCol; x++) {\n        let coor = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coor}\n            isLit={this.state.board[y][x]}\n            switchAdjs={() => this.switchAdjCells(coor)}\n          />\n        );\n      }\n      gameBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className='Board'>\n        <tbody>{gameBoard}</tbody>\n      </table>\n    );\n  }\n  render() {\n    return (\n      <div>\n        {this.state.hasWon ? (\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n          </div>\n        ) : (\n          <div>\n            <div className='Board-title'>\n              <div className='neon-blue'>Lights</div>\n              <div className='neon-orange'>Out</div>\n            </div>\n            {this.creatGameBoard()}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Board;","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport Cell from \"./Cell\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}